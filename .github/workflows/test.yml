name: Run linters and tests

on: push

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install poetry
      shell: bash
      run: |
        curl -fsS -o get-poetry.py https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py
        python get-poetry.py --preview -y
        echo "::set-env name=PATH::$HOME/.poetry/bin:$PATH"
        rm get-poetry.py
    - name: Configure poetry
      shell: bash
      run: poetry config virtualenvs.in-project true
    - name: Set up cache
      uses: actions/cache@v1
      id: cache
      with:
        path: .venv
        key: venv-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      shell: bash
      run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv
    - name: Install dependencies
      shell: bash
      run: poetry install
#    - name: Lint with flake8
#      run: |
#        poetry run flake8 . --count --show-source --statistics
    - name: Run pytest
      shell: bash
      run: poetry run pytest --junitxml=junit/test-results-${{ matrix.python-version }}.xml
    - name: Upload pytest test results
      uses: actions/upload-artifact@master
      with:
        name: pytest-results-${{ matrix.python-version }}
        path: junit/test-results-${{ matrix.python-version }}.xml
      # Use always() to always run this step to publish test results when there are test failures
      if: always()
